import User from "./User";
import { Conversation, ConversationBuilder } from "./Conversation";
import { Unreads } from "./Unreads";
import { Message } from "./PublishedDomain";
import Inbox from "../ui/Inbox";
import Popup from "../ui/Popup";
import Chatbox from "../ui/Chatbox";
import { InboxOptions, ChatboxOptions, PopupOptions } from "../ui/UIOptions";
import { Promise } from "../minipolyfill";
export default class Session {
    unreads: Unreads;
    constructor({appId, me, signature}: {
        appId: string;
        me: User;
        signature?: string;
    });
    hasValidCredentials(): Promise<boolean>;
    getOrStartConversation(other: User, {topicId, subject, custom}: {
        topicId?: string;
        subject?: string;
        custom?: {
        };
    }): Conversation;
    getOrStartConversation(conversationId: string, {participants, subject, custom, photoUrl}: {
        participants: Array<User>;
        subject?: string;
        custom?: {
        };
        photoUrl?: string;
    }): Conversation;
    getOrCreateConversation(conversationId: string): ConversationBuilder;
    createInbox(options?: InboxOptions): Inbox;
    createChatbox(selectedConversation: Conversation | ConversationBuilder, options?: ChatboxOptions): Chatbox;
    createPopup(conversation: Conversation | ConversationBuilder, options?: PopupOptions): Popup;
    setDesktopNotificationEnabled(isEnabled: boolean): void;
    registerDevice({platform, pushRegistrationId}: {platform: "ios"|"android", pushRegistrationId: string }): Promise<void>;
    unregisterDevice(): Promise<void>;
    on(eventType: "message", handler: (message: Message) => void): void;
    off(eventType: "message", handler: (message: Message) => void): void;
}
